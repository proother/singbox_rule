name: Update rules

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    - name: Fetch latest sing-box release
      id: fetch-release
      run: |
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest)
        SING_BOX_DEB_URL=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | endswith("linux_amd64.deb")) | .browser_download_url')
        SING_BOX_DEB_SHA256=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | endswith("linux_amd64.deb")) | .sha256')
        if [ -z "$SING_BOX_DEB_URL" ] || [ -z "$SING_BOX_DEB_SHA256" ]; then
          echo "Latest sing-box .deb package or its checksum not found."
          exit 1
        fi
        echo "deb_url=$SING_BOX_DEB_URL" >> $GITHUB_OUTPUT
        echo "deb_sha256=$SING_BOX_DEB_SHA256" >> $GITHUB_OUTPUT
    - name: "Setup sing-box"
      env:
        SING_BOX_DEB_URL: ${{ steps.fetch-release.outputs.deb_url }}
        SING_BOX_DEB_SHA256: ${{ steps.fetch-release.outputs.deb_sha256 }}
      run: |
        set -Eeuo pipefail
        echo "Downloading sing-box from $SING_BOX_DEB_URL"
        wget -O sing-box.deb "$SING_BOX_DEB_URL" || { echo "Download failed"; exit 1; }
        echo "$SING_BOX_DEB_SHA256  sing-box.deb" | sha256sum -c || { echo "Checksum verification failed"; exit 1; }
        sudo dpkg -i sing-box.deb || { echo "Installation failed"; exit 1; }
        rm sing-box.deb

    - name: Set up Python3
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas requests pyyaml
    - name: Run script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: python ../main.py
      working-directory: ./rule/
    - name: Commit and push config.json
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git add ./rule/*.json
        git add ./rule/*.srs
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        else
          git commit -m "Update rules"
          git push
        fi
